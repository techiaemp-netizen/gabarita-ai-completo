"""
Servi√ßo de integra√ß√£o com Perplexity AI para feedback educativo
"""
import os
import json
import requests
from typing import Dict, Any, Optional

class PerplexityService:
    def __init__(self):
        self.api_key = os.getenv('PERPLEXITY_API_KEY', 'pplx-dummy-key')
        self.base_url = "https://api.perplexity.ai/chat/completions"
        self.model = "sonar-pro"
        
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
        print(f"üîß Perplexity configurado com modelo: {self.model}")
    
    def gerar_feedback_erro(self, questao: str, alternativa_escolhida: str, 
                           alternativa_correta: str, tema: str) -> Optional[Dict[str, Any]]:
        """
        Gera feedback detalhado para erros usando Perplexity
        
        Args:
            questao: Texto da quest√£o
            alternativa_escolhida: Alternativa que o usu√°rio escolheu
            alternativa_correta: Alternativa correta
            tema: Tema da quest√£o
            
        Returns:
            Dict com feedback detalhado ou None em caso de erro
        """
        try:
            prompt = f"""
            Analise o erro do estudante na seguinte quest√£o sobre {tema}:
            
            Quest√£o: {questao}
            Alternativa escolhida pelo estudante: {alternativa_escolhida}
            Alternativa correta: {alternativa_correta}
            
            Forne√ßa um feedback educativo que inclua:
            1. Por que a alternativa escolhida est√° incorreta
            2. Conceitos importantes que o estudante deve revisar
            3. Fontes confi√°veis para estudo adicional
            4. Dicas para evitar erros similares
            
            Responda em formato JSON com as chaves: explicacao_erro, conceitos_importantes, fontes_estudo, dicas
            """
            
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json={
                    "model": self.model,
                    "messages": [
                        {"role": "system", "content": "Voc√™ √© um tutor especializado em concursos p√∫blicos brasileiros."},
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.3,
                    "max_tokens": 1000
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                
                # Tentar extrair JSON da resposta
                feedback_data = self._extrair_json_resposta(content)
                
                if feedback_data:
                    return feedback_data
                else:
                    # Fallback: criar feedback estruturado manualmente
                    return self._gerar_feedback_fallback(tema, alternativa_escolhida, alternativa_correta)
            else:
                print(f"‚ùå Erro na API Perplexity: {response.status_code} - {response.text}")
                return self._gerar_feedback_fallback(tema, alternativa_escolhida, alternativa_correta)
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar feedback: {e}")
            return self._gerar_feedback_fallback(tema, alternativa_escolhida, alternativa_correta)
    
    def pesquisar_conteudo(self, tema: str) -> Optional[str]:
        """
        Pesquisa conte√∫do atualizado sobre um tema
        
        Args:
            tema: Tema para pesquisar
            
        Returns:
            Conte√∫do encontrado ou None em caso de erro
        """
        try:
            prompt = f"Forne√ßa informa√ß√µes atualizadas e precisas sobre: {tema}"
            
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json={
                    "model": self.model,
                    "messages": [
                        {"role": "user", "content": prompt}
                    ],
                    "temperature": 0.2,
                    "max_tokens": 800
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                return content.strip()
            else:
                print(f"‚ùå Erro na pesquisa Perplexity: {response.status_code}")
                return self._gerar_conteudo_fallback(tema)
                
        except Exception as e:
            print(f"‚ùå Erro na pesquisa: {e}")
            return self._gerar_conteudo_fallback(tema)
    
    def _gerar_feedback_fallback(self, tema: str, alternativa_escolhida: str, alternativa_correta: str) -> Dict[str, Any]:
        """Gera feedback usando conhecimento interno quando Perplexity n√£o est√° dispon√≠vel"""
        
        feedback_templates = {
            'Pol√≠tica Nacional de Aten√ß√£o B√°sica': {
                'explicacao_erro': 'A alternativa escolhida n√£o reflete corretamente os princ√≠pios estabelecidos na PNAB.',
                'conceitos_importantes': 'A PNAB estabelece diretrizes para organiza√ß√£o da Aten√ß√£o B√°sica como porta de entrada preferencial do SUS.',
                'fontes_estudo': [
                    'https://bvsms.saude.gov.br/bvs/saudelegis/gm/2017/prt2436_22_09_2017.html',
                    'https://aps.saude.gov.br/politicas/pnab'
                ],
                'dicas': 'Foque nos objetivos principais da PNAB: organiza√ß√£o, qualifica√ß√£o e expans√£o da aten√ß√£o b√°sica.'
            },
            'Estrat√©gia Sa√∫de da Fam√≠lia': {
                'explicacao_erro': 'A ESF tem objetivos espec√≠ficos que diferem do modelo tradicional de aten√ß√£o.',
                'conceitos_importantes': 'A ESF √© uma estrat√©gia priorit√°ria para reorganiza√ß√£o da aten√ß√£o b√°sica no Brasil.',
                'fontes_estudo': [
                    'https://aps.saude.gov.br/estrategia/estrategiasf',
                    'https://bvsms.saude.gov.br/bvs/publicacoes/estrategia_saude_familia.pdf'
                ],
                'dicas': 'Lembre-se: a ESF reorganiza, n√£o substitui o modelo de aten√ß√£o √† sa√∫de.'
            },
            'Pol√≠tica Nacional de Aten√ß√£o B√°sica e Estrat√©gia Sa√∫de da Fam√≠lia': {
                'explicacao_erro': 'A alternativa escolhida n√£o corresponde aos objetivos principais da ESF conforme estabelecido na PNAB.',
                'conceitos_importantes': 'A ESF √© uma estrat√©gia priorit√°ria para expans√£o e consolida√ß√£o da aten√ß√£o b√°sica.',
                'fontes_estudo': [
                    'https://bvsms.saude.gov.br/bvs/saudelegis/gm/2017/prt2436_22_09_2017.html',
                    'https://aps.saude.gov.br/estrategia/estrategiasf'
                ],
                'dicas': 'Lembre-se que a ESF n√£o substitui, mas reorganiza o modelo de aten√ß√£o √† sa√∫de.'
            }
        }
        
        # Buscar template espec√≠fico ou usar gen√©rico
        template = feedback_templates.get(tema, {
            'explicacao_erro': f'A alternativa {alternativa_escolhida} n√£o est√° correta. A resposta correta √© {alternativa_correta}.',
            'conceitos_importantes': f'Revise os conceitos fundamentais sobre {tema}.',
            'fontes_estudo': ['https://www.saude.gov.br/', 'https://bvsms.saude.gov.br/'],
            'dicas': 'Estude com aten√ß√£o os documentos oficiais do Minist√©rio da Sa√∫de.'
        })
        
        return template
    
    def _gerar_conteudo_fallback(self, tema: str) -> str:
        """Gera conte√∫do b√°sico quando Perplexity n√£o est√° dispon√≠vel"""
        
        conteudos = {
            'Estrat√©gia Sa√∫de da Fam√≠lia': '''
            A Estrat√©gia Sa√∫de da Fam√≠lia (ESF) √© uma estrat√©gia de reorganiza√ß√£o da aten√ß√£o b√°sica no Brasil.
            Principais caracter√≠sticas:
            - Equipes multiprofissionais
            - Territ√≥rio definido
            - Popula√ß√£o adscrita
            - Aten√ß√£o integral e cont√≠nua
            - Foco na fam√≠lia e comunidade
            ''',
            'Pol√≠tica Nacional de Aten√ß√£o B√°sica': '''
            A PNAB estabelece diretrizes para organiza√ß√£o da Aten√ß√£o B√°sica no SUS.
            Principais pontos:
            - Porta de entrada preferencial do SUS
            - Coordena√ß√£o do cuidado
            - Integralidade da aten√ß√£o
            - Participa√ß√£o social
            - Qualifica√ß√£o profissional
            '''
        }
        
        return conteudos.get(tema, f"Conte√∫do sobre {tema} - consulte fontes oficiais do Minist√©rio da Sa√∫de.")
    
    def gerar_explicacao(self, prompt_explicacao: str) -> Optional[str]:
        """Gera explica√ß√£o usando Perplexity"""
        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json={
                    "model": self.model,
                    "messages": [
                        {"role": "system", "content": "Voc√™ √© um tutor especializado em concursos p√∫blicos brasileiros."},
                        {"role": "user", "content": prompt_explicacao}
                    ],
                    "temperature": 0.3,
                    "max_tokens": 800
                },
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                content = data.get('choices', [{}])[0].get('message', {}).get('content', '')
                return content.strip()
            else:
                print(f"‚ùå Erro na API Perplexity: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar explica√ß√£o: {e}")
            return None
    
    def _extrair_json_resposta(self, resposta: str) -> Optional[Dict[str, Any]]:
        """Extrai JSON da resposta da API"""
        try:
            # Tentar encontrar JSON na resposta
            import re
            json_match = re.search(r'\{.*\}', resposta, re.DOTALL)
            
            if json_match:
                json_str = json_match.group()
                return json.loads(json_str)
            else:
                return None
                
        except Exception as e:
            print(f"‚ùå Erro ao extrair JSON: {e}")
            return None

# Inst√¢ncia global do servi√ßo
perplexity_service = PerplexityService()

