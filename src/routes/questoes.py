"""
Rotas para gera√ß√£o e gerenciamento de quest√µes
"""
from flask import Blueprint, request, jsonify
from services.chatgpt_service import chatgpt_service
from services.perplexity_service import perplexity_service
from config.firebase_config import firebase_config
from datetime import datetime
import uuid
import random

questoes_bp = Blueprint('questoes', __name__)

# ========== SISTEMA DE ROLETA DE QUEST√ïES ==========

def _buscar_questao_do_pool(usuario_id, cargo, bloco, tipo_conhecimento, modo_foco, materia_foco):
    """Busca uma quest√£o dispon√≠vel no pool que o usu√°rio ainda n√£o respondeu"""
    try:
        print(f"üéØ Buscando quest√£o no pool para usu√°rio {usuario_id}")
        db = firebase_config.get_db()
        if not db:
            print("‚ö†Ô∏è Firebase n√£o configurado, retornando None")
            return None
        
        # Primeiro, buscar quest√µes que o usu√°rio j√° respondeu
        questoes_respondidas_ref = db.collection('questoes_respondidas')
        questoes_respondidas = questoes_respondidas_ref.where('usuario_id', '==', usuario_id).stream()
        
        questoes_ids_respondidas = set()
        for doc in questoes_respondidas:
            questoes_ids_respondidas.add(doc.to_dict().get('questao_id'))
        
        print(f"üìù Usu√°rio j√° respondeu {len(questoes_ids_respondidas)} quest√µes")
        
        # Buscar quest√µes no pool que correspondem aos crit√©rios
        pool_ref = db.collection('questoes_pool')
        query = pool_ref.where('cargo', '==', cargo).where('bloco', '==', bloco)
        
        # Filtrar por tipo de conhecimento se especificado
        if tipo_conhecimento != 'todos':
            query = query.where('tipo_conhecimento', '==', tipo_conhecimento)
        
        # Filtrar por mat√©ria espec√≠fica se em modo foco
        if modo_foco and materia_foco:
            query = query.where('tema', '==', materia_foco)
        
        questoes_pool = query.stream()
        
        # Filtrar quest√µes que o usu√°rio ainda n√£o respondeu
        questoes_disponiveis = []
        for doc in questoes_pool:
            questao_data = doc.to_dict()
            questao_data['id'] = doc.id
            
            if doc.id not in questoes_ids_respondidas:
                questoes_disponiveis.append(questao_data)
        
        print(f"üé≤ Encontradas {len(questoes_disponiveis)} quest√µes dispon√≠veis no pool")
        
        if questoes_disponiveis:
            # Selecionar quest√£o aleat√≥ria
            questao_selecionada = random.choice(questoes_disponiveis)
            
            # Incrementar contador de reutiliza√ß√£o
            pool_ref.document(questao_selecionada['id']).update({
                'reutilizada_count': questao_selecionada.get('reutilizada_count', 0) + 1,
                'ultima_utilizacao': datetime.now()
            })
            
            print(f"‚úÖ Quest√£o selecionada do pool: {questao_selecionada['questao'][:100]}...")
            return questao_selecionada
        
        print("‚ùå Nenhuma quest√£o dispon√≠vel no pool")
        return None
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar quest√£o no pool: {e}")
        return None

def _salvar_questao_no_pool(questao_completa, cargo, bloco, tipo_conhecimento, criado_por):
    """Salva uma nova quest√£o no pool para reutiliza√ß√£o"""
    try:
        print(f"üíæ Salvando quest√£o no pool")
        db = firebase_config.get_db()
        if not db:
            print("‚ö†Ô∏è Firebase n√£o configurado, retornando None")
            return None
        
        questao_pool = {
            'questao': questao_completa['questao'],
            'tipo': questao_completa['tipo'],
            'alternativas': questao_completa['alternativas'],
            'gabarito': questao_completa['gabarito'],
            'tema': questao_completa['tema'],
            'dificuldade': questao_completa['dificuldade'],
            'explicacao': questao_completa['explicacao'],
            'cargo': cargo,
            'bloco': bloco,
            'tipo_conhecimento': tipo_conhecimento,
            'data_criacao': datetime.now(),
            'criado_por': criado_por,
            'reutilizada_count': 0,
            'ultima_utilizacao': None
        }
        
        # Salvar no pool
        pool_ref = db.collection('questoes_pool')
        doc_ref = pool_ref.add(questao_pool)
        
        print(f"‚úÖ Quest√£o salva no pool com ID: {doc_ref[1].id}")
        return doc_ref[1].id
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar quest√£o no pool: {e}")
        return None

def _registrar_questao_respondida(usuario_id, questao_id, respondida=False, acertou=False, tempo_resposta=None):
    """Registra que o usu√°rio visualizou/respondeu uma quest√£o"""
    try:
        print(f"üìä Registrando quest√£o {questao_id} para usu√°rio {usuario_id}")
        db = firebase_config.get_db()
        if db is None:
            print("‚ö†Ô∏è Firebase n√£o configurado, n√£o √© poss√≠vel registrar quest√£o respondida")
            return None
        
        questao_respondida = {
            'usuario_id': usuario_id,
            'questao_id': questao_id,
            'respondida': respondida,
            'acertou': acertou,
            'data_resposta': datetime.now(),
            'tempo_resposta': tempo_resposta
        }
        
        # Salvar registro
        respondidas_ref = db.collection('questoes_respondidas')
        respondidas_ref.add(questao_respondida)
        
        print(f"‚úÖ Quest√£o registrada como visualizada")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao registrar quest√£o respondida: {e}")
        return False

# ========== FIM DO SISTEMA DE ROLETA ==========

@questoes_bp.route('/responder', methods=['POST'])
def responder_questao():
    """
    Rota para registrar resposta de quest√£o e atualizar estat√≠sticas do usu√°rio
    """
    try:
        data = request.get_json()
        
        # Validar dados obrigat√≥rios
        required_fields = ['questao_id', 'usuario_id', 'alternativa_escolhida']
        for field in required_fields:
            if field not in data:
                return jsonify({
                    'success': False,
                    'error': f'Campo obrigat√≥rio ausente: {field}',
                    'data': None
                }), 400
        
        questao_id = data['questao_id']
        usuario_id = data['usuario_id']
        alternativa_escolhida = data['alternativa_escolhida']
        tempo_resposta = data.get('tempo_resposta', 0)
        
        # Buscar quest√£o do pool para obter o gabarito correto
        gabarito_correto = None
        if firebase_config.is_configured():
            try:
                from firebase_admin import firestore
                db = firestore.client()
                
                # Buscar quest√£o no pool
                questao_ref = db.collection('questoes_pool').document(questao_id)
                questao_doc = questao_ref.get()
                
                if questao_doc.exists:
                    questao_data = questao_doc.to_dict()
                    gabarito_correto = questao_data.get('gabarito')
                    
            except Exception as e:
                print(f"Erro ao buscar quest√£o do pool: {e}")
        
        # Fallback para gabarito simulado se n√£o encontrar no pool
        if gabarito_correto is None:
            gabarito_correto = 'B'  # Gabarito padr√£o para simula√ß√£o
            
        acertou = alternativa_escolhida == gabarito_correto
        
        # Atualizar estat√≠sticas do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            try:
                from firebase_admin import firestore
                db = firestore.client()
                
                # Buscar dados atuais do usu√°rio
                user_ref = db.collection('usuarios').document(usuario_id)
                user_doc = user_ref.get()
                
                if user_doc.exists:
                    user_data = user_doc.to_dict()
                else:
                    user_data = {
                        'questoes_respondidas': 0,
                        'acertos': 0,
                        'sequencia_atual': 0,
                        'xp': 0,
                        'nivel': 1
                    }
                
                # Calcular novas estat√≠sticas
                novas_stats = {
                    'questoes_respondidas': user_data.get('questoes_respondidas', 0) + 1,
                    'acertos': user_data.get('acertos', 0) + (1 if acertou else 0),
                    'sequencia_atual': user_data.get('sequencia_atual', 0) + 1 if acertou else 0,
                    'xp': user_data.get('xp', 0) + (10 if acertou else 3),
                    'ultima_atividade': datetime.now().isoformat()
                }
                
                # Calcular novo n√≠vel
                novas_stats['nivel'] = (novas_stats['xp'] // 100) + 1
                
                # Atualizar no Firestore
                user_ref.set(novas_stats, merge=True)
                
                # Atualizar registro de quest√£o respondida no sistema de roleta
                _registrar_questao_respondida(
                    usuario_id=usuario_id,
                    questao_id=questao_id,
                    respondida=True,
                    acertou=acertou,
                    tempo_resposta=tempo_resposta
                )
                
            except Exception as e:
                print(f"Erro ao atualizar Firestore: {e}")
        
        # Gerar explica√ß√£o usando ChatGPT
        explicacao = "Explica√ß√£o n√£o dispon√≠vel no momento."
        try:
            prompt_explicacao = f"""
            Explique de forma did√°tica por que a alternativa {gabarito_simulado} √© a correta 
            para uma quest√£o sobre o tema relacionado ao CNU 2025.
            Seja claro, objetivo e educativo.
            """
            explicacao = chatgpt_service.gerar_explicacao(prompt_explicacao)
        except Exception as e:
            print(f"Erro ao gerar explica√ß√£o: {e}")
        
        return jsonify({
            'success': True,
            'error': None,
            'data': {
                'acertou': acertou,
                'gabarito': gabarito_correto,
                'explicacao': explicacao,
                'alternativa_escolhida': alternativa_escolhida,
                'tempo_resposta': tempo_resposta,
                'estatisticas': novas_stats if 'novas_stats' in locals() else None
            }
        })
        
    except Exception as e:
        print(f"Erro ao processar resposta: {e}")
        return jsonify({
            'success': False,
            'error': 'Erro interno do servidor',
            'data': None
        }), 500

@questoes_bp.route('/estatisticas/<usuario_id>', methods=['GET'])
def buscar_estatisticas(usuario_id):
    """
    Rota para buscar estat√≠sticas do usu√°rio
    """
    try:
        if firebase_config.is_configured():
            try:
                from firebase_admin import firestore
                db = firestore.client()
                
                user_ref = db.collection('usuarios').document(usuario_id)
                user_doc = user_ref.get()
                
                if user_doc.exists:
                    user_data = user_doc.to_dict()
                    
                    # Calcular estat√≠sticas derivadas
                    questoes_respondidas = user_data.get('questoes_respondidas', 0)
                    acertos = user_data.get('acertos', 0)
                    taxa_acertos = (acertos / questoes_respondidas * 100) if questoes_respondidas > 0 else 0
                    
                    estatisticas = {
                        'total_questoes': questoes_respondidas,
                        'total_acertos': acertos,
                        'taxa_acertos': round(taxa_acertos, 1),
                        'tempo_medio': 45,  # Simulado por enquanto
                        'xp': user_data.get('xp', 0),
                        'nivel': user_data.get('nivel', 1),
                        'sequencia_atual': user_data.get('sequencia_atual', 0),
                        'acertos_por_tema': {
                            'SUS': 85,
                            'Aten√ß√£o Prim√°ria': 78,
                            'Epidemiologia': 65
                        },
                        'evolucao_semanal': [
                            {'semana': 'Sem 1', 'acertos': max(0, acertos - 20)},
                            {'semana': 'Sem 2', 'acertos': max(0, acertos - 12)},
                            {'semana': 'Sem 3', 'acertos': max(0, acertos - 5)},
                            {'semana': 'Sem 4', 'acertos': acertos}
                        ]
                    }
                    
                    return jsonify({
                        'success': True,
                        'error': None,
                        'data': estatisticas
                    })
                    
            except Exception as e:
                print(f"Erro ao buscar do Firestore: {e}")
        
        # Fallback para estat√≠sticas simuladas
        estatisticas_simuladas = {
            'total_questoes': 45,
            'total_acertos': 32,
            'taxa_acertos': 71.1,
            'tempo_medio': 45,
            'xp': 320,
            'nivel': 4,
            'sequencia_atual': 3,
            'acertos_por_tema': {
                'SUS': 85,
                'Aten√ß√£o Prim√°ria': 78,
                'Epidemiologia': 65
            },
            'evolucao_semanal': [
                {'semana': 'Sem 1', 'acertos': 12},
                {'semana': 'Sem 2', 'acertos': 18},
                {'semana': 'Sem 3', 'acertos': 25},
                {'semana': 'Sem 4', 'acertos': 32}
            ]
        }
        
        return jsonify({
            'success': True,
            'error': None,
            'data': estatisticas_simuladas
        })
        
    except Exception as e:
        print(f"Erro ao buscar estat√≠sticas: {e}")
        return jsonify({
            'success': False,
            'error': 'Erro interno do servidor',
            'data': None
        }), 500

# Mapeamento de conte√∫dos por cargo e bloco com flag de conhecimentos
CONTEUDOS_EDITAL = {
    # Bloco 1 - Seguridade Social: Sa√∫de, Assist√™ncia Social e Previd√™ncia Social
    'Enfermeiro': {
        'Bloco 1 - Seguridade Social': {
            'conhecimentos_especificos': [
                'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
                'Financiamento, or√ßamento e Lei 8.212/1991',
                'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
                'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
                'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
                'Determinantes do processo sa√∫de-doen√ßa',
                'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
                'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
                'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
                'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
                'Regime Geral e Pr√≥prio de Previd√™ncia Social',
                'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
                'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
                'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
            ],
            'conhecimentos_gerais': [
                'Desafios do Estado de Direito',
                'Pol√≠ticas p√∫blicas',
                '√âtica e integridade',
                'Diversidade e inclus√£o na sociedade',
                'Administra√ß√£o p√∫blica federal',
                'Trabalho e tecnologia'
            ]
        }
    },
    'M√©dico': {
        'Bloco 1 - Seguridade Social': {
            'conhecimentos_especificos': [
                'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
                'Financiamento, or√ßamento e Lei 8.212/1991',
                'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
                'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
                'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
                'Determinantes do processo sa√∫de-doen√ßa',
                'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
                'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
                'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
                'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
                'Regime Geral e Pr√≥prio de Previd√™ncia Social',
                'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
                'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
                'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
            ],
            'conhecimentos_gerais': [
                'Desafios do Estado de Direito',
                'Pol√≠ticas p√∫blicas',
                '√âtica e integridade',
                'Diversidade e inclus√£o na sociedade',
                'Administra√ß√£o p√∫blica federal',
                'Trabalho e tecnologia'
            ]
        }
    },
    'Assistente Social': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Nutricionista': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Psic√≥logo': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Pesquisador': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Tecnologista': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Analista do Seguro Social': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Bi√≥logo': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Farmac√™utico': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Fisioterapeuta': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Fonoaudi√≥logo': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    'Terapeuta Ocupacional': {
        'Bloco 1 - Seguridade Social': [
            'Conceito, evolu√ß√£o legislativa e Constitui√ß√£o de 1988',
            'Financiamento, or√ßamento e Lei 8.212/1991',
            'Hist√≥ria e legisla√ß√£o da sa√∫de no Brasil',
            'Sistema √önico de Sa√∫de (SUS): estrutura, organiza√ß√£o, modelos assistenciais',
            'Vigil√¢ncia em sa√∫de, promo√ß√£o e preven√ß√£o, emerg√™ncias sanit√°rias',
            'Determinantes do processo sa√∫de-doen√ßa',
            'Hist√≥rico, pol√≠ticas p√∫blicas, Lei 8.742/1993 (LOAS), PNAS 2004, SUAS',
            'Prote√ß√£o social b√°sica, especial e benef√≠cios eventuais',
            'Avalia√ß√£o da defici√™ncia e legisla√ß√£o espec√≠fica',
            'No√ß√µes de direito previdenci√°rio, CF/88, Lei 8.213/1991',
            'Regime Geral e Pr√≥prio de Previd√™ncia Social',
            'Benef√≠cios, benef√≠cios eventuais, qualidade de segurado, avalia√ß√£o biopsicossocial',
            'Legisla√ß√£o, per√≠cia, acompanhamento m√©dico, promo√ß√£o √† sa√∫de',
            'Acidentes do trabalho, doen√ßas relacionadas, riscos ocupacionais e legisla√ß√µes aplic√°veis'
        ]
    },
    
    # Bloco 2 - Cultura e Educa√ß√£o
    'T√©cnico em Comunica√ß√£o Social': {
        'Bloco 2 - Cultura e Educa√ß√£o': [
            'Lei de Acesso √† Informa√ß√£o, LGPD, pol√≠ticas de comunica√ß√£o, m√≠dias digitais',
            'LDB, Constitui√ß√£o, Plano Nacional de Educa√ß√£o, educa√ß√£o b√°sica e superior, EAD, ODS',
            'Sistema Nacional de Cultura, pol√≠ticas e legisla√ß√£o patrimonial, direitos culturais, instrumentos de fomento (ex: Lei Rouanet, Lei Paulo Gustavo)',
            'Fundamentos, m√©todos qualitativos e quantitativos, ciclo da pesquisa, √©tica em pesquisa',
            'Constru√ß√£o e an√°lise de indicadores, monitoramento, m√©todos quantitativos e Big Data'
        ]
    },
    'T√©cnico em Documenta√ß√£o': {
        'Bloco 2 - Cultura e Educa√ß√£o': [
            'Lei de Acesso √† Informa√ß√£o, LGPD, pol√≠ticas de comunica√ß√£o, m√≠dias digitais',
            'LDB, Constitui√ß√£o, Plano Nacional de Educa√ß√£o, educa√ß√£o b√°sica e superior, EAD, ODS',
            'Sistema Nacional de Cultura, pol√≠ticas e legisla√ß√£o patrimonial, direitos culturais, instrumentos de fomento (ex: Lei Rouanet, Lei Paulo Gustavo)',
            'Fundamentos, m√©todos qualitativos e quantitativos, ciclo da pesquisa, √©tica em pesquisa',
            'Constru√ß√£o e an√°lise de indicadores, monitoramento, m√©todos quantitativos e Big Data'
        ]
    },
    'T√©cnico em Assuntos Culturais': {
        'Bloco 2 - Cultura e Educa√ß√£o': [
            'Lei de Acesso √† Informa√ß√£o, LGPD, pol√≠ticas de comunica√ß√£o, m√≠dias digitais',
            'LDB, Constitui√ß√£o, Plano Nacional de Educa√ß√£o, educa√ß√£o b√°sica e superior, EAD, ODS',
            'Sistema Nacional de Cultura, pol√≠ticas e legisla√ß√£o patrimonial, direitos culturais, instrumentos de fomento (ex: Lei Rouanet, Lei Paulo Gustavo)',
            'Fundamentos, m√©todos qualitativos e quantitativos, ciclo da pesquisa, √©tica em pesquisa',
            'Constru√ß√£o e an√°lise de indicadores, monitoramento, m√©todos quantitativos e Big Data'
        ]
    },
    'Analista Cultural': {
        'Bloco 2 - Cultura e Educa√ß√£o': [
            'Lei de Acesso √† Informa√ß√£o, LGPD, pol√≠ticas de comunica√ß√£o, m√≠dias digitais',
            'LDB, Constitui√ß√£o, Plano Nacional de Educa√ß√£o, educa√ß√£o b√°sica e superior, EAD, ODS',
            'Sistema Nacional de Cultura, pol√≠ticas e legisla√ß√£o patrimonial, direitos culturais, instrumentos de fomento (ex: Lei Rouanet, Lei Paulo Gustavo)',
            'Fundamentos, m√©todos qualitativos e quantitativos, ciclo da pesquisa, √©tica em pesquisa',
            'Constru√ß√£o e an√°lise de indicadores, monitoramento, m√©todos quantitativos e Big Data'
        ]
    },
    'T√©cnico em Assuntos Educacionais': {
        'Bloco 2 - Cultura e Educa√ß√£o': [
            'Lei de Acesso √† Informa√ß√£o, LGPD, pol√≠ticas de comunica√ß√£o, m√≠dias digitais',
            'LDB, Constitui√ß√£o, Plano Nacional de Educa√ß√£o, educa√ß√£o b√°sica e superior, EAD, ODS',
            'Sistema Nacional de Cultura, pol√≠ticas e legisla√ß√£o patrimonial, direitos culturais, instrumentos de fomento (ex: Lei Rouanet, Lei Paulo Gustavo)',
            'Fundamentos, m√©todos qualitativos e quantitativos, ciclo da pesquisa, √©tica em pesquisa',
            'Constru√ß√£o e an√°lise de indicadores, monitoramento, m√©todos quantitativos e Big Data'
        ]
    },
    
    # Bloco 3 - Ci√™ncias, Dados e Tecnologia
    'Especialista em Geologia e Geof√≠sica': {
        'Bloco 3 - Ci√™ncias, Dados e Tecnologia': [
            'Fundamentos, paradigmas de inova√ß√£o, impactos sociais, √©tica e populariza√ß√£o cient√≠fica',
            'Sistema Nacional de CT&I, marco legal, instrumentos de fomento, governan√ßa, indicadores de inova√ß√£o, ODS',
            'Condu√ß√£o de projetos (inicia√ß√£o, execu√ß√£o, monitoramento, encerramento), m√©todos √°geis (Scrum, Kanban), modelos institucionais',
            'No√ß√µes de TICs, ci√™ncia de dados, intelig√™ncia artificial, uso de dados na gest√£o p√∫blica, LGPD, interoperabilidade, dados abertos',
            'Pr√°ticas de pesquisa, classifica√ß√£o, abordagens qualitativas e quantitativas, estrutura√ß√£o de projetos, normas t√©cnicas'
        ]
    },
    'Analista de Tecnologia Militar': {
        'Bloco 3 - Ci√™ncias, Dados e Tecnologia': [
            'Fundamentos, paradigmas de inova√ß√£o, impactos sociais, √©tica e populariza√ß√£o cient√≠fica',
            'Sistema Nacional de CT&I, marco legal, instrumentos de fomento, governan√ßa, indicadores de inova√ß√£o, ODS',
            'Condu√ß√£o de projetos (inicia√ß√£o, execu√ß√£o, monitoramento, encerramento), m√©todos √°geis (Scrum, Kanban), modelos institucionais',
            'No√ß√µes de TICs, ci√™ncia de dados, intelig√™ncia artificial, uso de dados na gest√£o p√∫blica, LGPD, interoperabilidade, dados abertos',
            'Pr√°ticas de pesquisa, classifica√ß√£o, abordagens qualitativas e quantitativas, estrutura√ß√£o de projetos, normas t√©cnicas'
        ]
    },
    'Analista de Ci√™ncia e Tecnologia': {
        'Bloco 3 - Ci√™ncias, Dados e Tecnologia': [
            'Fundamentos, paradigmas de inova√ß√£o, impactos sociais, √©tica e populariza√ß√£o cient√≠fica',
            'Sistema Nacional de CT&I, marco legal, instrumentos de fomento, governan√ßa, indicadores de inova√ß√£o, ODS',
            'Condu√ß√£o de projetos (inicia√ß√£o, execu√ß√£o, monitoramento, encerramento), m√©todos √°geis (Scrum, Kanban), modelos institucionais',
            'No√ß√µes de TICs, ci√™ncia de dados, intelig√™ncia artificial, uso de dados na gest√£o p√∫blica, LGPD, interoperabilidade, dados abertos',
            'Pr√°ticas de pesquisa, classifica√ß√£o, abordagens qualitativas e quantitativas, estrutura√ß√£o de projetos, normas t√©cnicas'
        ]
    },
    
    # Bloco 4 - Engenharias e Arquitetura
    'Especialista em Regula√ß√£o de Petr√≥leo': {
        'Bloco 4 - Engenharias e Arquitetura': [
            'Planejamento, or√ßamento, licita√ß√£o, execu√ß√£o, controle de obras, manuten√ß√£o, seguran√ßa, qualidade',
            'Pol√≠ticas urbanas e regionais, regulariza√ß√£o fundi√°ria, cartografia, urbanismo, geografia urbana',
            'Elabora√ß√£o de projetos, acessibilidade, sustentabilidade, patologias em edifica√ß√µes, conforto ambiental',
            'Pol√≠ticas agr√≠colas, manejo sustent√°vel, certifica√ß√£o, pesca e aquicultura, biotecnologia aplicada',
            'Gest√£o e licenciamento ambiental, mudan√ßas clim√°ticas, economia ambiental, gest√£o de res√≠duos, patrim√¥nios, pol√≠ticas energ√©ticas, recursos h√≠dricos'
        ]
    },
    'Engenheiro de Tecnologia Militar': {
        'Bloco 4 - Engenharias e Arquitetura': [
            'Planejamento, or√ßamento, licita√ß√£o, execu√ß√£o, controle de obras, manuten√ß√£o, seguran√ßa, qualidade',
            'Pol√≠ticas urbanas e regionais, regulariza√ß√£o fundi√°ria, cartografia, urbanismo, geografia urbana',
            'Elabora√ß√£o de projetos, acessibilidade, sustentabilidade, patologias em edifica√ß√µes, conforto ambiental',
            'Pol√≠ticas agr√≠colas, manejo sustent√°vel, certifica√ß√£o, pesca e aquicultura, biotecnologia aplicada',
            'Gest√£o e licenciamento ambiental, mudan√ßas clim√°ticas, economia ambiental, gest√£o de res√≠duos, patrim√¥nios, pol√≠ticas energ√©ticas, recursos h√≠dricos'
        ]
    },
    'Arquiteto': {
        'Bloco 4 - Engenharias e Arquitetura': [
            'Planejamento, or√ßamento, licita√ß√£o, execu√ß√£o, controle de obras, manuten√ß√£o, seguran√ßa, qualidade',
            'Pol√≠ticas urbanas e regionais, regulariza√ß√£o fundi√°ria, cartografia, urbanismo, geografia urbana',
            'Elabora√ß√£o de projetos, acessibilidade, sustentabilidade, patologias em edifica√ß√µes, conforto ambiental',
            'Pol√≠ticas agr√≠colas, manejo sustent√°vel, certifica√ß√£o, pesca e aquicultura, biotecnologia aplicada',
            'Gest√£o e licenciamento ambiental, mudan√ßas clim√°ticas, economia ambiental, gest√£o de res√≠duos, patrim√¥nios, pol√≠ticas energ√©ticas, recursos h√≠dricos'
        ]
    },
    'Engenheiro': {
        'Bloco 4 - Engenharias e Arquitetura': [
            'Planejamento, or√ßamento, licita√ß√£o, execu√ß√£o, controle de obras, manuten√ß√£o, seguran√ßa, qualidade',
            'Pol√≠ticas urbanas e regionais, regulariza√ß√£o fundi√°ria, cartografia, urbanismo, geografia urbana',
            'Elabora√ß√£o de projetos, acessibilidade, sustentabilidade, patologias em edifica√ß√µes, conforto ambiental',
            'Pol√≠ticas agr√≠colas, manejo sustent√°vel, certifica√ß√£o, pesca e aquicultura, biotecnologia aplicada',
            'Gest√£o e licenciamento ambiental, mudan√ßas clim√°ticas, economia ambiental, gest√£o de res√≠duos, patrim√¥nios, pol√≠ticas energ√©ticas, recursos h√≠dricos'
        ]
    },
    'Engenheiro Agr√¥nomo': {
        'Bloco 4 - Engenharias e Arquitetura': [
            'Planejamento, or√ßamento, licita√ß√£o, execu√ß√£o, controle de obras, manuten√ß√£o, seguran√ßa, qualidade',
            'Pol√≠ticas urbanas e regionais, regulariza√ß√£o fundi√°ria, cartografia, urbanismo, geografia urbana',
            'Elabora√ß√£o de projetos, acessibilidade, sustentabilidade, patologias em edifica√ß√µes, conforto ambiental',
            'Pol√≠ticas agr√≠colas, manejo sustent√°vel, certifica√ß√£o, pesca e aquicultura, biotecnologia aplicada',
            'Gest√£o e licenciamento ambiental, mudan√ßas clim√°ticas, economia ambiental, gest√£o de res√≠duos, patrim√¥nios, pol√≠ticas energ√©ticas, recursos h√≠dricos'
        ]
    },
    
    # Bloco 5 - Administra√ß√£o
    'Analista T√©cnico-Administrativo': {
        'Bloco 5 - Administra√ß√£o': [
            'Gest√£o Governamental e Governan√ßa P√∫blica: Estrat√©gia, Pessoas, Projetos e Processos',
            'Gest√£o Governamental e Governan√ßa P√∫blica: Riscos, Inova√ß√£o, Participa√ß√£o, Coordena√ß√£o e Patrim√¥nio',
            'Pol√≠ticas P√∫blicas: Ciclo, formula√ß√£o e avalia√ß√£o',
            'Administra√ß√£o Financeira e Or√ßament√°ria, Contabilidade P√∫blica e Compras na Administra√ß√£o P√∫blica',
            'Transpar√™ncia, Prote√ß√£o de Dados, Comunica√ß√£o e Atendimento ao Cidad√£o'
        ]
    },
    'Contador': {
        'Bloco 5 - Administra√ß√£o': [
            'Gest√£o Governamental e Governan√ßa P√∫blica: Estrat√©gia, Pessoas, Projetos e Processos',
            'Gest√£o Governamental e Governan√ßa P√∫blica: Riscos, Inova√ß√£o, Participa√ß√£o, Coordena√ß√£o e Patrim√¥nio',
            'Pol√≠ticas P√∫blicas: Ciclo, formula√ß√£o e avalia√ß√£o',
            'Administra√ß√£o Financeira e Or√ßament√°ria, Contabilidade P√∫blica e Compras na Administra√ß√£o P√∫blica',
            'Transpar√™ncia, Prote√ß√£o de Dados, Comunica√ß√£o e Atendimento ao Cidad√£o'
        ]
    },
    
    # Bloco 6 - Controle e Fiscaliza√ß√£o
    'Analista Judiciario': {
        'Bloco 6 - Controle e Fiscalizacao': {
            'conhecimentos_especificos': [
                'Direito Constitucional e Administrativo',
                'Controle Interno e Externo da Administra√ß√£o P√∫blica',
                'Auditoria e Fiscaliza√ß√£o',
                'Processo Administrativo e Disciplinar',
                'Transpar√™ncia e Accountability'
            ],
            'conhecimentos_gerais': [
                'Gest√£o de Riscos e Compliance',
                'Legisla√ß√£o do Poder Judici√°rio'
            ]
        }
    },
    
    # Bloco 6 - Desenvolvimento Socioecon√¥mico
    'Analista T√©cnico de Desenvolvimento Socioecon√¥mico': {
        'Bloco 6 - Desenvolvimento Socioecon√¥mico': [
            'Desenvolvimento, Sustentabilidade e Inclus√£o',
            'Desenvolvimento Produtivo e Regional no Brasil',
            'Gest√£o Estrat√©gica e Regula√ß√£o',
            'Desenvolvimento Socioecon√¥mico no Brasil (hist√≥rico e contempor√¢neo)',
            'Desigualdades e Din√¢micas Socioecon√¥micas'
        ]
    },
    'Especialista em Regula√ß√£o de Petr√≥leo e Derivados': {
        'Bloco 6 - Desenvolvimento Socioecon√¥mico': [
            'Desenvolvimento, Sustentabilidade e Inclus√£o',
            'Desenvolvimento Produtivo e Regional no Brasil',
            'Gest√£o Estrat√©gica e Regula√ß√£o',
            'Desenvolvimento Socioecon√¥mico no Brasil (hist√≥rico e contempor√¢neo)',
            'Desigualdades e Din√¢micas Socioecon√¥micas'
        ]
    },
    'Especialista em Regula√ß√£o da Atividade Cinematogr√°fica': {
        'Bloco 6 - Desenvolvimento Socioecon√¥mico': [
            'Desenvolvimento, Sustentabilidade e Inclus√£o',
            'Desenvolvimento Produtivo e Regional no Brasil',
            'Gest√£o Estrat√©gica e Regula√ß√£o',
            'Desenvolvimento Socioecon√¥mico no Brasil (hist√≥rico e contempor√¢neo)',
            'Desigualdades e Din√¢micas Socioecon√¥micas'
        ]
    },
    
    # Bloco 7 - Justi√ßa e Defesa
    'Analista T√©cnico de Justi√ßa e Defesa': {
        'Bloco 7 - Justi√ßa e Defesa': [
            'Gest√£o Governamental e M√©todos Aplicados',
            'Pol√≠ticas de Seguran√ßa e Defesa ‚Äì Ambiente Internacional e Tecnologias Emergentes',
            'Pol√≠ticas de Seguran√ßa e Defesa ‚Äì Ambiente Nacional e Quest√µes Emergentes',
            'Pol√≠ticas de Seguran√ßa P√∫blica',
            'Pol√≠ticas de Justi√ßa e Cidadania'
        ]
    },
    
    # Bloco 8 - Intermedi√°rio - Sa√∫de
    'T√©cnico em Atividades M√©dico-Hospitalares': {
        'Bloco 8 - Intermedi√°rio - Sa√∫de': {
            'conhecimentos_especificos': [
                'Sa√∫de'
            ],
            'conhecimentos_gerais': [
                'L√≠ngua Portuguesa',
                'Matem√°tica',
                'No√ß√µes de Direito',
                'Realidade Brasileira'
            ]
        }
    },
    'T√©cnico de Enfermagem': {
        'Bloco 8 - Intermedi√°rio - Sa√∫de': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de'
        ]
    },
    'T√©cnico em Pesquisa e Investiga√ß√£o Biom√©dica': {
        'Bloco 8 - Intermedi√°rio - Sa√∫de': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de'
        ]
    },
    'T√©cnico em Radiologia': {
        'Bloco 8 - Intermedi√°rio - Sa√∫de': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de'
        ]
    },
    
    # Bloco 9 - Intermedi√°rio - Regula√ß√£o
    'T√©cnico em Regula√ß√£o de Avia√ß√£o Civil': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Atividades de Minera√ß√£o': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o de Petr√≥leo': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o de Sa√∫de Suplementar': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o de Telecomunica√ß√µes': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o de Transportes Aquavi√°rios': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o de Transportes Terrestres': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o e Vigil√¢ncia Sanit√°ria': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    },
    'T√©cnico em Regula√ß√£o da Atividade Cinematogr√°fica': {
        'Bloco 9 - Intermedi√°rio - Regula√ß√£o': [
            'L√≠ngua Portuguesa',
            'Matem√°tica',
            'No√ß√µes de Direito',
            'Realidade Brasileira',
            'Sa√∫de',
            'Regula√ß√£o e Ag√™ncias Reguladoras'
        ]
    }
}

@questoes_bp.route('/gerar', methods=['POST'])
def gerar_questao():
    """Gera uma nova quest√£o personalizada para o usu√°rio"""
    try:
        print("üî• Requisi√ß√£o recebida na API de gera√ß√£o de quest√µes")
        data = request.get_json()
        print(f"üìã Dados recebidos: {data}")
        print(f"üìã Tipo dos dados: {type(data)}")
        if data:
            print(f"üìã Chaves dispon√≠veis: {list(data.keys())}")
            for key, value in data.items():
                print(f"üìã {key}: {value} (tipo: {type(value)})")
        else:
            print("üìã Dados s√£o None ou vazios!")
        
        usuario_id = data.get('usuario_id')
        cargo = data.get('cargo')
        bloco = data.get('bloco')
        tipo_questao = data.get('tipo_questao', 'm√∫ltipla escolha')
        tipo_conhecimento = data.get('tipo_conhecimento', 'todos')  # todos, conhecimentos_gerais, conhecimentos_especificos
        modo_foco = data.get('modo_foco', False)
        materia_foco = data.get('materia_foco', None)
        
        print(f"üë§ Usuario ID: {usuario_id}")
        print(f"üíº Cargo: {cargo}")
        print(f"üìö Bloco: {bloco}")
        
        if not all([usuario_id, cargo, bloco]):
            print("‚ùå Dados obrigat√≥rios faltando")
            return jsonify({'error': 'User data is required'}), 400
        
        # Obter conte√∫do espec√≠fico do edital baseado no tipo de conhecimento
        if modo_foco and materia_foco:
            conteudo_edital = [materia_foco]
            print(f"üìñ Modo foco ativado para mat√©ria: {materia_foco}")
        else:
            conteudo_edital = _obter_conteudo_edital(cargo, bloco, tipo_conhecimento)
            print(f"üìñ Conte√∫do do edital ({tipo_conhecimento}): {conteudo_edital}")
        
        if not conteudo_edital:
            print("‚ùå Cargo ou bloco n√£o encontrado")
            return jsonify({'error': 'Cargo ou bloco n√£o encontrado'}), 404
        
        # ========== IMPLEMENTA√á√ÉO DA ROLETA ==========
        print("üéØ SISTEMA DE ROLETA ATIVADO")
        
        # 1. Primeiro, tentar buscar quest√£o do pool
        questao_do_pool = _buscar_questao_do_pool(
            usuario_id=usuario_id,
            cargo=cargo,
            bloco=bloco,
            tipo_conhecimento=tipo_conhecimento,
            modo_foco=modo_foco,
            materia_foco=materia_foco
        )
        
        questao_completa = None
        questao_id = None
        origem_questao = None
        
        if questao_do_pool:
            # Quest√£o encontrada no pool
            print("üé≤ Usando quest√£o do POOL (economia de tokens!)")
            questao_id = questao_do_pool['id']
            questao_completa = {
                'id': questao_id,
                'questao': questao_do_pool['questao'],
                'tipo': questao_do_pool['tipo'],
                'alternativas': questao_do_pool['alternativas'],
                'gabarito': questao_do_pool['gabarito'],
                'tema': questao_do_pool['tema'],
                'dificuldade': questao_do_pool['dificuldade'],
                'explicacao': questao_do_pool['explicacao']
            }
            origem_questao = "pool"
        else:
            # 2. Se n√£o encontrou no pool, gerar nova quest√£o com ChatGPT
            print("ü§ñ Gerando NOVA quest√£o com ChatGPT (ser√° adicionada ao pool)")
            print(f"DEBUG: Par√¢metros - cargo={cargo}, bloco={bloco}, tipo={tipo_questao}")
            print(f"DEBUG: Conte√∫do edital: {conteudo_edital}")
            try:
                print("DEBUG: Chamando chatgpt_service.gerar_questao...")
                questao_ia = chatgpt_service.gerar_questao(
                    cargo=cargo,
                    conteudo_edital=conteudo_edital,
                    tipo_questao=tipo_questao
                )
                
                print(f"DEBUG: Resposta do ChatGPT: {questao_ia}")
                
                if questao_ia:
                    questao_id = str(uuid.uuid4())
                    questao_completa = {
                        'id': questao_id,
                        'questao': questao_ia['questao'],
                        'tipo': questao_ia.get('tipo', 'm√∫ltipla escolha'),
                        'alternativas': [
                            {'id': alt.split(')')[0], 'texto': alt.split(') ', 1)[1] if ') ' in alt else alt}
                            for alt in questao_ia['alternativas']
                        ],
                        'gabarito': questao_ia['gabarito'],
                        'tema': questao_ia.get('tema', conteudo_edital[0] if conteudo_edital else 'Tema geral'),
                        'dificuldade': questao_ia.get('dificuldade', 'medio'),
                        'explicacao': questao_ia.get('explicacao', '')
                    }
                    
                    # 3. Salvar nova quest√£o no pool para reutiliza√ß√£o
                    pool_id = _salvar_questao_no_pool(
                        questao_completa=questao_completa,
                        cargo=cargo,
                        bloco=bloco,
                        tipo_conhecimento=tipo_conhecimento,
                        criado_por=usuario_id
                    )
                    
                    if pool_id:
                        questao_id = pool_id  # Usar ID do pool
                        questao_completa['id'] = pool_id
                    
                    print(f"‚úÖ Quest√£o IA gerada e salva no pool: {questao_completa['questao'][:100]}...")
                    origem_questao = "chatgpt_nova"
                else:
                    print("DEBUG: ChatGPT retornou None ou vazio")
                    raise Exception("ChatGPT n√£o retornou quest√£o v√°lida")
                    
            except Exception as e:
                print(f"‚ùå Erro ao gerar quest√£o com IA: {e}")
                print(f"DEBUG: Traceback completo:")
                import traceback
                traceback.print_exc()
                print("üîÑ Usando quest√£o de fallback...")
                
                # Fallback: quest√£o de exemplo
                questao_id = str(uuid.uuid4())
                questao_completa = {
                    'id': questao_id,
                    'questao': f"Quest√£o sobre {conteudo_edital[0] if conteudo_edital else 'conhecimentos gerais'} para {cargo}",
                    'tipo': 'm√∫ltipla escolha',
                    'alternativas': [
                        {'id': 'A', 'texto': 'Alternativa A - Exemplo'},
                        {'id': 'B', 'texto': 'Alternativa B - Exemplo'},
                        {'id': 'C', 'texto': 'Alternativa C - Exemplo'},
                        {'id': 'D', 'texto': 'Alternativa D - Exemplo'}
                    ],
                    'gabarito': 'A',
                    'tema': conteudo_edital[0] if conteudo_edital else 'Tema geral',
                    'dificuldade': 'medio',
                    'explicacao': 'Esta √© uma quest√£o de exemplo para teste do sistema.'
                }
                origem_questao = "fallback"
        
        # 4. Registrar que o usu√°rio visualizou esta quest√£o
        _registrar_questao_respondida(
            usuario_id=usuario_id,
            questao_id=questao_id,
            respondida=False,  # Apenas visualizada por enquanto
            acertou=False,
            tempo_resposta=None
        )
        
        print(f"üìä Quest√£o entregue - Origem: {origem_questao}, ID: {questao_id}")
        
        # Armazenar quest√£o completa em cache/sess√£o para valida√ß√£o posterior
        # TODO: Implementar cache Redis ou sess√£o para armazenar gabarito
        
        # Retornar quest√£o sem gabarito para o frontend no formato de array
        questao_frontend = {
            'id': questao_id,
            'question': questao_completa['questao'],  # Frontend espera 'question'
            'options': questao_completa['alternativas'],  # Frontend espera 'options'
            'subject': questao_completa['tema'],  # Frontend espera 'subject'
            'difficulty': questao_completa['dificuldade'],  # Frontend espera 'difficulty'
            'tipo': questao_completa['tipo'],
            'tema': questao_completa['tema'],  # Manter compatibilidade
            'questao': questao_completa['questao'],  # Manter compatibilidade
            'alternativas': questao_completa['alternativas']  # Manter compatibilidade
        }
        
        # Retornar no formato de array para compatibilidade com o frontend
        return jsonify([questao_frontend])
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar quest√£o: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': 'Erro interno do servidor'}), 500

@questoes_bp.route('/materias-foco/<cargo>/<bloco>', methods=['GET'])
def obter_materias_foco(cargo, bloco):
    """Obt√©m todas as mat√©rias dispon√≠veis para o modo foco"""
    try:
        # Normalizar o nome do bloco para compatibilidade
        bloco_normalizado = bloco
        if ':' in bloco:
            bloco_normalizado = bloco.split(':')[0].strip()
        
        conteudos_bloco = CONTEUDOS_EDITAL.get(cargo, {}).get(bloco_normalizado, {})
        
        materias = []
        
        # Verificar se √© a nova estrutura com conhecimentos gerais/espec√≠ficos
        if isinstance(conteudos_bloco, dict) and 'conhecimentos_especificos' in conteudos_bloco:
            # Adicionar conhecimentos espec√≠ficos
            for materia in conteudos_bloco.get('conhecimentos_especificos', []):
                materias.append({
                    'nome': materia,
                    'tipo': 'conhecimentos_especificos'
                })
            
            # Adicionar conhecimentos gerais
            for materia in conteudos_bloco.get('conhecimentos_gerais', []):
                materias.append({
                    'nome': materia,
                    'tipo': 'conhecimentos_gerais'
                })
        else:
            # Estrutura antiga (lista simples) - considerar como conhecimentos espec√≠ficos
            if isinstance(conteudos_bloco, list):
                for materia in conteudos_bloco:
                    materias.append({
                        'nome': materia,
                        'tipo': 'conhecimentos_especificos'
                    })
        
        return jsonify({
            'success': True,
            'data': materias
        })
        
    except Exception as e:
        print(f"Erro ao obter mat√©rias para modo foco: {e}")
        return jsonify({'error': 'Erro interno do servidor'}), 500

# Fun√ß√£o duplicada removida - usando apenas a primeira defini√ß√£o

@questoes_bp.route('/historico/<usuario_id>', methods=['GET'])
def obter_historico(usuario_id):
    """Obt√©m o hist√≥rico de quest√µes do usu√°rio usando o sistema de roleta"""
    try:
        # Par√¢metros de pagina√ß√£o
        limite = int(request.args.get('limite', 20))
        offset = int(request.args.get('offset', 0))
        
        questoes = []
        
        if firebase_config.is_configured():
            try:
                from firebase_admin import firestore
                db = firestore.client()
                
                # Buscar quest√µes respondidas pelo usu√°rio
                query = db.collection('questoes_respondidas')\
                         .where('usuario_id', '==', usuario_id)\
                         .where('respondida', '==', True)\
                         .order_by('data_resposta', direction=firestore.Query.DESCENDING)\
                         .limit(limite)\
                         .offset(offset)
                
                docs = query.stream()
                
                for doc in docs:
                    questao_respondida = doc.to_dict()
                    questao_id = questao_respondida.get('questao_id')
                    
                    # Buscar dados completos da quest√£o no pool
                    questao_ref = db.collection('questoes_pool').document(questao_id)
                    questao_doc = questao_ref.get()
                    
                    if questao_doc.exists:
                        questao_data = questao_doc.to_dict()
                        
                        # Combinar dados da quest√£o com dados da resposta
                        questao_completa = {
                            'id': questao_id,
                            'questao': questao_data.get('questao', ''),
                            'tipo': questao_data.get('tipo', 'multipla_escolha'),
                            'alternativas': questao_data.get('alternativas', []),
                            'tema': questao_data.get('tema', ''),
                            'dificuldade': questao_data.get('dificuldade', 'medio'),
                            'explicacao': questao_data.get('explicacao', ''),
                            'cargo': questao_data.get('cargo', ''),
                            'bloco': questao_data.get('bloco', ''),
                            'respondida': questao_respondida.get('respondida', False),
                            'acertou': questao_respondida.get('acertou', False),
                            'data_resposta': questao_respondida.get('data_resposta', ''),
                            'tempo_resposta': questao_respondida.get('tempo_resposta', 0)
                        }
                        
                        questoes.append(questao_completa)
                    
            except Exception as e:
                print(f"Erro ao buscar hist√≥rico no Firestore: {e}")
        
        # Se n√£o h√° quest√µes no Firestore, retornar dados simulados
        if not questoes:
            questoes = _gerar_historico_simulado(usuario_id, limite)
        
        return jsonify({
            'success': True,
            'data': {
                'questoes': questoes,
                'total': len(questoes)
            }
        })
        
    except Exception as e:
        print(f"Erro ao obter hist√≥rico: {e}")
        return jsonify({'error': 'Erro interno do servidor'}), 500

@questoes_bp.route('/estatisticas/<usuario_id>', methods=['GET'])
def obter_estatisticas(usuario_id):
    """Obt√©m estat√≠sticas de desempenho do usu√°rio"""
    try:
        estatisticas = {
            'total_questoes': 0,
            'total_acertos': 0,
            'taxa_acertos': 0,
            'tempo_medio': 0,
            'acertos_por_tema': {},
            'evolucao_semanal': []
        }
        
        if firebase_config.is_connected():
            try:
                db = firebase_config.get_db()
                
                # Buscar todas as quest√µes respondidas
                query = db.collection('questoes')\
                         .where('usuario_id', '==', usuario_id)\
                         .where('respondida', '==', True)
                
                docs = query.stream()
                questoes = [doc.to_dict() for doc in docs]
                
                if questoes:
                    estatisticas = _calcular_estatisticas(questoes)
                    
            except Exception as e:
                print(f"Erro ao buscar estat√≠sticas no Firestore: {e}")
        
        # Se n√£o h√° dados no Firestore, retornar estat√≠sticas simuladas
        if estatisticas['total_questoes'] == 0:
            estatisticas = _gerar_estatisticas_simuladas()
        
        return jsonify({
             'success': True,
             'data': estatisticas
         })
         
    except Exception as e:
        print(f"Erro ao obter estat√≠sticas: {e}")
        return jsonify({'error': 'Erro interno do servidor'}), 500

@questoes_bp.route('/materias/<cargo>/<bloco>', methods=['GET'])
def obter_materias_por_cargo_bloco(cargo, bloco):
    """Obt√©m as mat√©rias espec√≠ficas baseadas no cargo e bloco do usu√°rio"""
    try:
        # Debug: imprimir par√¢metros recebidos
        print(f"üîç Buscando mat√©rias para cargo: '{cargo}', bloco: '{bloco}'")
        
        # Buscar no dicion√°rio CONTEUDOS_EDITAL - usar o bloco exato primeiro
        bloco_normalizado = bloco
        conteudos = CONTEUDOS_EDITAL.get(cargo, {}).get(bloco_normalizado, [])
        
        print(f"üîç Tentativa 1 - Bloco exato: '{bloco_normalizado}' -> {type(conteudos)} com {len(conteudos) if isinstance(conteudos, (list, dict)) else 0} itens")
        
        # Se n√£o encontrar, tentar com normaliza√ß√£o
        if not conteudos:
            bloco_normalizado = bloco.replace('_', ' ')
            conteudos = CONTEUDOS_EDITAL.get(cargo, {}).get(bloco_normalizado, [])
            print(f"üîç Tentativa 2 - Bloco normalizado: '{bloco_normalizado}' -> {type(conteudos)} com {len(conteudos) if isinstance(conteudos, (list, dict)) else 0} itens")
        
        # Debug: mostrar chaves dispon√≠veis para o cargo
        cargo_data = CONTEUDOS_EDITAL.get(cargo, {})
        print(f"üîç Chaves dispon√≠veis para cargo '{cargo}': {list(cargo_data.keys())}")
        
        materias_performance = []
        
        if isinstance(conteudos, dict):  # Nova estrutura com conhecimentos_especificos e conhecimentos_gerais
            # Processar conhecimentos espec√≠ficos
            for i, materia in enumerate(conteudos.get('conhecimentos_especificos', [])[:3]):
                materias_performance.append({
                    'materia': materia,
                    'tipo_conhecimento': 'conhecimentos_especificos',
                    'acertos': 65 + (i * 5) % 30,
                    'total': 100,
                    'percentual': 65 + (i * 5) % 30,
                    'tendencia': 'subindo' if i % 2 == 0 else 'descendo'
                })
            
            # Processar conhecimentos gerais
            for i, materia in enumerate(conteudos.get('conhecimentos_gerais', [])[:2]):
                materias_performance.append({
                    'materia': materia,
                    'tipo_conhecimento': 'conhecimentos_gerais',
                    'acertos': 70 + (i * 3) % 25,
                    'total': 100,
                    'percentual': 70 + (i * 3) % 25,
                    'tendencia': 'subindo' if i % 2 == 1 else 'descendo'
                })
        
        elif isinstance(conteudos, list):  # Estrutura antiga (lista simples)
            for i, materia in enumerate(conteudos[:5]):
                materias_performance.append({
                    'materia': materia,
                    'tipo_conhecimento': 'conhecimentos_especificos',  # Assumir como espec√≠ficos
                    'acertos': 65 + (i * 5) % 30,
                    'total': 100,
                    'percentual': 65 + (i * 5) % 30,
                    'tendencia': 'subindo' if i % 2 == 0 else 'descendo'
                })
        
        else:  # Fallback para mat√©rias gen√©ricas
            materias_genericas = [
                ('L√≠ngua Portuguesa', 'conhecimentos_gerais'),
                ('Matem√°tica', 'conhecimentos_gerais'), 
                ('No√ß√µes de Direito', 'conhecimentos_gerais'),
                ('Realidade Brasileira', 'conhecimentos_gerais'),
                ('Conhecimentos Espec√≠ficos', 'conhecimentos_especificos')
            ]
            
            for i, (materia, tipo) in enumerate(materias_genericas):
                materias_performance.append({
                    'materia': materia,
                    'tipo_conhecimento': tipo,
                    'acertos': 65 + (i * 5) % 30,
                    'total': 100,
                    'percentual': 65 + (i * 5) % 30,
                    'tendencia': 'subindo' if i % 2 == 0 else 'descendo'
                })
        
        return jsonify({
            'success': True,
            'data': materias_performance
        })
        
    except Exception as e:
        print(f"Erro ao obter mat√©rias: {e}")
        return jsonify({'error': 'Erro interno do servidor'}), 500

def _obter_conteudo_edital(cargo, bloco, tipo_conhecimento='todos'):
    """Obt√©m conte√∫do espec√≠fico do edital para o cargo e bloco"""
    # Normalizar o nome do bloco para compatibilidade
    bloco_normalizado = bloco
    if ':' in bloco:
        bloco_normalizado = bloco.split(':')[0].strip()
    
    conteudos_bloco = CONTEUDOS_EDITAL.get(cargo, {}).get(bloco_normalizado, {})
    
    # Verificar se √© a nova estrutura com conhecimentos gerais/espec√≠ficos
    if isinstance(conteudos_bloco, dict) and 'conhecimentos_especificos' in conteudos_bloco:
        if tipo_conhecimento == 'conhecimentos_gerais':
            conteudos = conteudos_bloco.get('conhecimentos_gerais', [])
        elif tipo_conhecimento == 'conhecimentos_especificos':
            conteudos = conteudos_bloco.get('conhecimentos_especificos', [])
        else:  # todos
            conteudos = conteudos_bloco.get('conhecimentos_especificos', []) + conteudos_bloco.get('conhecimentos_gerais', [])
    else:
        # Estrutura antiga (lista simples) - considerar como conhecimentos espec√≠ficos
        conteudos = conteudos_bloco if isinstance(conteudos_bloco, list) else []
    
    if conteudos:
        # Selecionar alguns t√≥picos aleatoriamente
        import random
        num_topicos = min(3, len(conteudos))
        topicos_selecionados = random.sample(conteudos, num_topicos)
        return ', '.join(topicos_selecionados)
    
    # Fallback gen√©rico
    return 'Conhecimentos espec√≠ficos do cargo conforme edital'

def _atualizar_estatisticas_usuario(usuario_id, acertou, tema):
    """Atualiza estat√≠sticas do usu√°rio no Firestore"""
    try:
        if not firebase_config.is_connected():
            return
        
        db = firebase_config.get_db()
        usuario_ref = db.collection('usuarios').document(usuario_id)
        
        # Buscar dados atuais
        doc = usuario_ref.get()
        if not doc.exists:
            return
        
        dados = doc.to_dict()
        
        # Atualizar vida
        vida_atual = dados.get('vida', 80)
        if acertou:
            nova_vida = min(vida_atual + 5, 100)
        else:
            nova_vida = max(vida_atual - 10, 0)
        
        # Atualizar pontua√ß√£o
        pontuacao_atual = dados.get('pontuacao', 0)
        if acertou:
            nova_pontuacao = pontuacao_atual + 10
        else:
            nova_pontuacao = max(pontuacao_atual - 5, 0)
        
        # Atualizar erros por tema
        erros_por_tema = dados.get('erros_por_tema', {})
        if not acertou and tema:
            erros_por_tema[tema] = erros_por_tema.get(tema, 0) + 1
        
        # Salvar atualiza√ß√µes
        usuario_ref.update({
            'vida': nova_vida,
            'pontuacao': nova_pontuacao,
            'erros_por_tema': erros_por_tema,
            'ultimo_acesso': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"Erro ao atualizar estat√≠sticas do usu√°rio: {e}")

def _gerar_historico_simulado(usuario_id, limite):
    """Gera hist√≥rico simulado para desenvolvimento"""
    import random
    
    questoes_simuladas = []
    temas = ['Pol√≠tica Nacional de Sa√∫de', 'Estrat√©gia Sa√∫de da Fam√≠lia', 'Vigil√¢ncia em Sa√∫de']
    
    for i in range(min(limite, 10)):
        questao = {
            'id': f'sim_{i}',
            'questao': f'Quest√£o simulada {i+1} sobre {random.choice(temas)}',
            'tema': random.choice(temas),
            'acertou': random.choice([True, False]),
            'tempo_resposta': random.randint(60, 300),
            'data_resposta': datetime.now().isoformat()
        }
        questoes_simuladas.append(questao)
    
    return questoes_simuladas

def _gerar_estatisticas_simuladas():
    """Gera estat√≠sticas simuladas para desenvolvimento"""
    return {
        'total_questoes': 156,
        'total_acertos': 78,
        'taxa_acertos': 50,
        'tempo_medio': 2.3,
        'acertos_por_tema': {
            'Pol√≠tica Nacional de Sa√∫de': 15,
            'Estrat√©gia Sa√∫de da Fam√≠lia': 12,
            'Vigil√¢ncia em Sa√∫de': 8
        },
        'evolucao_semanal': [
            {'semana': '2025-07-14', 'acertos': 45},
            {'semana': '2025-07-21', 'acertos': 52}
        ]
    }

@questoes_bp.route('/dashboard/estatisticas-gerais/<usuario_id>', methods=['GET'])
def obter_estatisticas_gerais(usuario_id):
    """
    Retorna estat√≠sticas gerais do usu√°rio para o dashboard
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            db = firestore.client()
            
            user_ref = db.collection('usuarios').document(usuario_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                user_data = user_doc.to_dict()
                
                # Calcular estat√≠sticas baseadas nos dados reais
                questoes_respondidas = user_data.get('questoes_respondidas', 0)
                questoes_corretas = user_data.get('questoes_corretas', 0)
                
                # F√≥rmulas de c√°lculo:
                # Taxa de acerto = (quest√µes corretas / quest√µes respondidas) * 100
                taxa_acerto = (questoes_corretas / questoes_respondidas * 100) if questoes_respondidas > 0 else 0
                
                # Tempo total de estudo em minutos
                tempo_total_estudo = user_data.get('tempo_total_estudo', 0)
                
                # Dias consecutivos de estudo
                dias_consecutivos = user_data.get('dias_consecutivos', 0)
                
                # Melhor sequ√™ncia de acertos
                melhor_sequencia = user_data.get('melhor_sequencia', 0)
                
                # N√≠vel atual baseado em XP
                xp_atual = user_data.get('xp_atual', 0)
                nivel_atual = int(xp_atual / 100) + 1  # 100 XP por n√≠vel
                xp_proximo_nivel = (nivel_atual * 100)
                
                # Ranking simulado baseado na taxa de acerto
                ranking_total = 15420  # Total de usu√°rios simulado
                percentil = min(taxa_acerto + 10, 99.9)  # Percentil baseado na taxa
                ranking_posicao = int(ranking_total * (100 - percentil) / 100)
                
                # M√©dia de tempo por quest√£o em segundos
                media_tempo_questao = int(tempo_total_estudo * 60 / questoes_respondidas) if questoes_respondidas > 0 else 45
                
                # Quest√µes hoje (simulado baseado em atividade recente)
                questoes_hoje = min(questoes_respondidas % 25, 20)
                
                # Progresso semanal baseado na meta
                meta_semanal = 100
                progresso_semanal = min((questoes_hoje * 7 / meta_semanal) * 100, 100)
                
                return jsonify({
                    'success': True,
                    'estatisticas': {
                        'questoes_respondidas': questoes_respondidas,
                        'questoes_corretas': questoes_corretas,
                        'taxa_acerto': round(taxa_acerto, 1),
                        'tempo_total_estudo': tempo_total_estudo,
                        'dias_consecutivos': dias_consecutivos,
                        'melhor_sequencia': melhor_sequencia,
                        'nivel_atual': nivel_atual,
                        'xp_atual': xp_atual,
                        'xp_proximo_nivel': xp_proximo_nivel,
                        'ranking_posicao': ranking_posicao,
                        'ranking_total': ranking_total,
                        'percentil': round(percentil, 1),
                        'favoritas': user_data.get('favoritas', 0),
                        'listas_revisao': user_data.get('listas_revisao', 0),
                        'simulados_completos': user_data.get('simulados_completos', 0),
                        'media_tempo_questao': media_tempo_questao,
                        'questoes_hoje': questoes_hoje,
                        'meta_diaria': 20,
                        'progresso_semanal': round(progresso_semanal, 0),
                        'meta_semanal': meta_semanal
                    }
                })
        
        # Fallback com dados simulados se Firebase n√£o estiver configurado
        return jsonify({
            'success': True,
            'estatisticas': {
                'questoes_respondidas': 1247,
                'questoes_corretas': 1059,
                'taxa_acerto': 85.0,
                'tempo_total_estudo': 18420,
                'dias_consecutivos': 12,
                'melhor_sequencia': 28,
                'nivel_atual': 23,
                'xp_atual': 1847,
                'xp_proximo_nivel': 2000,
                'ranking_posicao': 892,
                'ranking_total': 15420,
                'percentil': 94.2,
                'favoritas': 23,
                'listas_revisao': 6,
                'simulados_completos': 8,
                'media_tempo_questao': 42,
                'questoes_hoje': 15,
                'meta_diaria': 20,
                'progresso_semanal': 78,
                'meta_semanal': 100
            }
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar estat√≠sticas gerais: {str(e)}'
        }), 500

@questoes_bp.route('/dashboard/desempenho-semanal/<usuario_id>', methods=['GET'])
def obter_desempenho_semanal(usuario_id):
    """
    Retorna dados de desempenho semanal do usu√°rio
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            from datetime import datetime, timedelta
            import random
            
            db = firestore.client()
            user_ref = db.collection('usuarios').document(usuario_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                user_data = user_doc.to_dict()
                taxa_acerto_media = user_data.get('taxa_acerto', 85)
                
                # Gerar dados da semana baseados na performance do usu√°rio
                dias_semana = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'S√°b', 'Dom']
                desempenho_semanal = []
                
                for i, dia in enumerate(dias_semana):
                    # Quest√µes por dia: varia√ß√£o baseada no dia da semana
                    base_questoes = 20
                    if i < 5:  # Dias √∫teis
                        questoes = base_questoes + random.randint(-5, 8)
                    else:  # Fim de semana
                        questoes = base_questoes - random.randint(5, 10)
                    
                    # Acertos baseados na taxa m√©dia do usu√°rio com varia√ß√£o
                    variacao = random.uniform(-10, 10)
                    taxa_dia = max(50, min(100, taxa_acerto_media + variacao))
                    acertos = int(questoes * taxa_dia / 100)
                    
                    # Tempo m√©dio por quest√£o (30-60 segundos)
                    tempo_medio = random.randint(30, 60)
                    
                    desempenho_semanal.append({
                        'dia': dia,
                        'questoes': questoes,
                        'acertos': acertos,
                        'tempo': tempo_medio
                    })
                
                return jsonify({
                    'success': True,
                    'desempenho_semanal': desempenho_semanal
                })
        
        # Fallback com dados simulados
        return jsonify({
            'success': True,
            'desempenho_semanal': [
                { 'dia': 'Seg', 'questoes': 18, 'acertos': 15, 'tempo': 45 },
                { 'dia': 'Ter', 'questoes': 22, 'acertos': 19, 'tempo': 38 },
                { 'dia': 'Qua', 'questoes': 25, 'acertos': 21, 'tempo': 42 },
                { 'dia': 'Qui', 'questoes': 20, 'acertos': 17, 'tempo': 40 },
                { 'dia': 'Sex', 'questoes': 28, 'acertos': 24, 'tempo': 35 },
                { 'dia': 'S√°b', 'questoes': 15, 'acertos': 13, 'tempo': 48 },
                { 'dia': 'Dom', 'questoes': 12, 'acertos': 10, 'tempo': 52 }
            ]
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar desempenho semanal: {str(e)}'
        }), 500

@questoes_bp.route('/dashboard/evolucao-mensal/<usuario_id>', methods=['GET'])
def obter_evolucao_mensal(usuario_id):
    """
    Retorna dados de evolu√ß√£o mensal do usu√°rio
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            from datetime import datetime, timedelta
            import random
            
            db = firestore.client()
            user_ref = db.collection('usuarios').document(usuario_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                user_data = user_doc.to_dict()
                taxa_acerto_base = user_data.get('taxa_acerto', 75)
                
                # Gerar evolu√ß√£o dos √∫ltimos 6 meses
                meses = ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun']
                evolucao_mensal = []
                
                for i, mes in enumerate(meses):
                    # Simular crescimento progressivo
                    crescimento = i * 2  # 2% de crescimento por m√™s
                    taxa_mes = min(95, taxa_acerto_base + crescimento + random.uniform(-3, 3))
                    
                    # Quest√µes por m√™s baseadas na atividade
                    questoes_mes = 400 + random.randint(-50, 100)
                    
                    evolucao_mensal.append({
                        'mes': mes,
                        'taxa_acerto': round(taxa_mes, 1),
                        'questoes': questoes_mes
                    })
                
                return jsonify({
                    'success': True,
                    'evolucao_mensal': evolucao_mensal
                })
        
        # Fallback com dados simulados
        return jsonify({
            'success': True,
            'evolucao_mensal': [
                { 'mes': 'Jan', 'taxa_acerto': 72.5, 'questoes': 380 },
                { 'mes': 'Fev', 'taxa_acerto': 75.2, 'questoes': 420 },
                { 'mes': 'Mar', 'taxa_acerto': 78.8, 'questoes': 465 },
                { 'mes': 'Abr', 'taxa_acerto': 81.3, 'questoes': 510 },
                { 'mes': 'Mai', 'taxa_acerto': 83.7, 'questoes': 485 },
                { 'mes': 'Jun', 'taxa_acerto': 85.9, 'questoes': 520 }
            ]
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar evolu√ß√£o mensal: {str(e)}'
        }), 500

@questoes_bp.route('/dashboard/metas/<usuario_id>', methods=['GET'])
def obter_metas_usuario(usuario_id):
    """
    Retorna as metas do usu√°rio
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            
            db = firestore.client()
            user_ref = db.collection('usuarios').document(usuario_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                user_data = user_doc.to_dict()
                
                # Calcular progresso das metas baseado nos dados reais
                questoes_respondidas = user_data.get('questoes_respondidas', 0)
                questoes_corretas = user_data.get('questoes_corretas', 0)
                tempo_total_estudo = user_data.get('tempo_total_estudo', 0)
                dias_consecutivos = user_data.get('dias_consecutivos', 0)
                
                # F√≥rmulas de progresso das metas:
                # Meta quest√µes: progresso = (quest√µes respondidas / meta) * 100
                meta_questoes_mes = 500
                progresso_questoes = min((questoes_respondidas / meta_questoes_mes) * 100, 100)
                
                # Meta taxa de acerto: progresso baseado na taxa atual
                meta_taxa_acerto = 90
                taxa_atual = (questoes_corretas / questoes_respondidas * 100) if questoes_respondidas > 0 else 0
                progresso_taxa = min((taxa_atual / meta_taxa_acerto) * 100, 100)
                
                # Meta tempo de estudo: 20 horas por m√™s (1200 minutos)
                meta_tempo_mes = 1200
                progresso_tempo = min((tempo_total_estudo / meta_tempo_mes) * 100, 100)
                
                # Meta dias consecutivos: 30 dias
                meta_dias_consecutivos = 30
                progresso_dias = min((dias_consecutivos / meta_dias_consecutivos) * 100, 100)
                
                return jsonify({
                    'success': True,
                    'metas': [
                        {
                            'titulo': 'Quest√µes do M√™s',
                            'atual': questoes_respondidas,
                            'meta': meta_questoes_mes,
                            'progresso': round(progresso_questoes, 0),
                            'tipo': 'questoes'
                        },
                        {
                            'titulo': 'Taxa de Acerto',
                            'atual': round(taxa_atual, 1),
                            'meta': meta_taxa_acerto,
                            'progresso': round(progresso_taxa, 0),
                            'tipo': 'percentual'
                        },
                        {
                            'titulo': 'Tempo de Estudo',
                            'atual': tempo_total_estudo,
                            'meta': meta_tempo_mes,
                            'progresso': round(progresso_tempo, 0),
                            'tipo': 'tempo'
                        },
                        {
                            'titulo': 'Dias Consecutivos',
                            'atual': dias_consecutivos,
                            'meta': meta_dias_consecutivos,
                            'progresso': round(progresso_dias, 0),
                            'tipo': 'dias'
                        }
                    ]
                })
        
        # Fallback com dados simulados
        return jsonify({
            'success': True,
            'metas': [
                {
                    'titulo': 'Quest√µes do M√™s',
                    'atual': 387,
                    'meta': 500,
                    'progresso': 77,
                    'tipo': 'questoes'
                },
                {
                    'titulo': 'Taxa de Acerto',
                    'atual': 85.2,
                    'meta': 90.0,
                    'progresso': 95,
                    'tipo': 'percentual'
                },
                {
                    'titulo': 'Tempo de Estudo',
                    'atual': 920,
                    'meta': 1200,
                    'progresso': 77,
                    'tipo': 'tempo'
                },
                {
                    'titulo': 'Dias Consecutivos',
                    'atual': 12,
                    'meta': 30,
                    'progresso': 40,
                    'tipo': 'dias'
                }
            ]
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar metas do usu√°rio: {str(e)}'
        }), 500

@questoes_bp.route('/dashboard/atividades-recentes/<usuario_id>', methods=['GET'])
def obter_atividades_recentes(usuario_id):
    """
    Retorna atividades recentes do usu√°rio
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            from datetime import datetime, timedelta
            import random
            
            db = firestore.client()
            
            # Buscar hist√≥rico de quest√µes respondidas
            questoes_ref = db.collection('questoes_respondidas').where('usuario_id', '==', usuario_id).order_by('timestamp', direction=firestore.Query.DESCENDING).limit(10)
            questoes_docs = questoes_ref.get()
            
            atividades = []
            
            for doc in questoes_docs:
                data = doc.to_dict()
                timestamp = data.get('timestamp', datetime.now())
                
                # Calcular tempo relativo
                agora = datetime.now()
                if isinstance(timestamp, str):
                    timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                
                diff = agora - timestamp
                if diff.days > 0:
                    tempo_relativo = f'{diff.days}d atr√°s'
                elif diff.seconds > 3600:
                    horas = diff.seconds // 3600
                    tempo_relativo = f'{horas}h atr√°s'
                else:
                    minutos = diff.seconds // 60
                    tempo_relativo = f'{minutos}min atr√°s'
                
                atividades.append({
                    'tipo': 'questao_respondida',
                    'descricao': f"Respondeu quest√£o de {data.get('materia', 'Conhecimentos Gerais')}",
                    'resultado': 'Acertou' if data.get('correta', False) else 'Errou',
                    'tempo': tempo_relativo,
                    'icone': 'CheckCircle' if data.get('correta', False) else 'XCircle'
                })
            
            # Se n√£o houver atividades suficientes, adicionar simuladas
            if len(atividades) < 5:
                atividades_simuladas = [
                    {
                        'tipo': 'simulado_iniciado',
                        'descricao': 'Iniciou simulado de Direito Constitucional',
                        'resultado': 'Em andamento',
                        'tempo': '2h atr√°s',
                        'icone': 'Play'
                    },
                    {
                        'tipo': 'meta_atingida',
                        'descricao': 'Atingiu meta di√°ria de quest√µes',
                        'resultado': '20/20 quest√µes',
                        'tempo': '1d atr√°s',
                        'icone': 'Target'
                    },
                    {
                        'tipo': 'nivel_subiu',
                        'descricao': 'Subiu para o n√≠vel 23',
                        'resultado': '+100 XP',
                        'tempo': '2d atr√°s',
                        'icone': 'TrendingUp'
                    }
                ]
                atividades.extend(atividades_simuladas[:5-len(atividades)])
            
            return jsonify({
                'success': True,
                'atividades': atividades[:5]  # Limitar a 5 atividades
            })
        
        # Fallback com dados simulados
        return jsonify({
            'success': True,
            'atividades': [
                {
                    'tipo': 'questao_respondida',
                    'descricao': 'Respondeu quest√£o de Direito Administrativo',
                    'resultado': 'Acertou',
                    'tempo': '15min atr√°s',
                    'icone': 'CheckCircle'
                },
                {
                    'tipo': 'simulado_iniciado',
                    'descricao': 'Iniciou simulado de Direito Constitucional',
                    'resultado': 'Em andamento',
                    'tempo': '2h atr√°s',
                    'icone': 'Play'
                },
                {
                    'tipo': 'questao_respondida',
                    'descricao': 'Respondeu quest√£o de Portugu√™s',
                    'resultado': 'Errou',
                    'tempo': '3h atr√°s',
                    'icone': 'XCircle'
                },
                {
                    'tipo': 'meta_atingida',
                    'descricao': 'Atingiu meta di√°ria de quest√µes',
                    'resultado': '20/20 quest√µes',
                    'tempo': '1d atr√°s',
                    'icone': 'Target'
                },
                {
                    'tipo': 'nivel_subiu',
                    'descricao': 'Subiu para o n√≠vel 23',
                    'resultado': '+100 XP',
                    'tempo': '2d atr√°s',
                    'icone': 'TrendingUp'
                }
            ]
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar atividades recentes: {str(e)}'
        }), 500

@questoes_bp.route('/dashboard/notificacoes/<usuario_id>', methods=['GET'])
def obter_notificacoes(usuario_id):
    """
    Retorna notifica√ß√µes do usu√°rio
    """
    try:
        # Buscar dados do usu√°rio no Firebase/Firestore
        if firebase_config.is_configured():
            from firebase_admin import firestore
            from datetime import datetime, timedelta
            import random
            
            db = firestore.client()
            user_ref = db.collection('usuarios').document(usuario_id)
            user_doc = user_ref.get()
            
            if user_doc.exists:
                user_data = user_doc.to_dict()
                
                # Gerar notifica√ß√µes baseadas no perfil do usu√°rio
                notificacoes = []
                
                # Notifica√ß√£o de meta di√°ria
                questoes_hoje = user_data.get('questoes_hoje', 0)
                meta_diaria = 20
                if questoes_hoje < meta_diaria:
                    faltam = meta_diaria - questoes_hoje
                    notificacoes.append({
                        'id': 'meta_diaria',
                        'tipo': 'meta',
                        'titulo': 'Meta Di√°ria',
                        'mensagem': f'Faltam {faltam} quest√µes para atingir sua meta di√°ria!',
                        'icone': 'Target',
                        'cor': 'warning',
                        'timestamp': datetime.now().isoformat(),
                        'lida': False
                    })
                
                # Notifica√ß√£o de sequ√™ncia de acertos
                sequencia_atual = user_data.get('sequencia_atual', 0)
                if sequencia_atual >= 10:
                    notificacoes.append({
                        'id': 'sequencia_acertos',
                        'tipo': 'conquista',
                        'titulo': 'Sequ√™ncia Incr√≠vel!',
                        'mensagem': f'Voc√™ acertou {sequencia_atual} quest√µes seguidas! Continue assim!',
                        'icone': 'Zap',
                        'cor': 'success',
                        'timestamp': (datetime.now() - timedelta(minutes=30)).isoformat(),
                        'lida': False
                    })
                
                # Notifica√ß√£o de novo n√≠vel
                xp_atual = user_data.get('xp_atual', 0)
                nivel_atual = int(xp_atual / 100) + 1
                xp_proximo_nivel = nivel_atual * 100
                if xp_atual >= xp_proximo_nivel - 50:  # Pr√≥ximo do pr√≥ximo n√≠vel
                    falta_xp = xp_proximo_nivel - xp_atual
                    notificacoes.append({
                        'id': 'proximo_nivel',
                        'tipo': 'progresso',
                        'titulo': 'Quase no Pr√≥ximo N√≠vel!',
                        'mensagem': f'Faltam apenas {falta_xp} XP para o n√≠vel {nivel_atual + 1}!',
                        'icone': 'TrendingUp',
                        'cor': 'info',
                        'timestamp': (datetime.now() - timedelta(hours=1)).isoformat(),
                        'lida': False
                    })
                
                # Notifica√ß√£o de mat√©ria com baixo desempenho
                materias_performance = user_data.get('materias_performance', {})
                for materia, dados in materias_performance.items():
                    if dados.get('taxa_acerto', 100) < 70:
                        notificacoes.append({
                            'id': f'baixo_desempenho_{materia}',
                            'tipo': 'alerta',
                            'titulo': 'Aten√ß√£o na Mat√©ria',
                            'mensagem': f'Sua taxa de acerto em {materia} est√° baixa. Que tal revisar?',
                            'icone': 'AlertTriangle',
                            'cor': 'warning',
                            'timestamp': (datetime.now() - timedelta(hours=2)).isoformat(),
                            'lida': False
                        })
                        break  # Apenas uma notifica√ß√£o deste tipo
                
                # Limitar a 5 notifica√ß√µes mais recentes
                notificacoes = sorted(notificacoes, key=lambda x: x['timestamp'], reverse=True)[:5]
                
                return jsonify({
                    'success': True,
                    'notificacoes': notificacoes
                })
        
        # Fallback com dados simulados
        return jsonify({
            'success': True,
            'notificacoes': [
                {
                    'id': 'meta_diaria',
                    'tipo': 'meta',
                    'titulo': 'Meta Di√°ria',
                    'mensagem': 'Faltam 5 quest√µes para atingir sua meta di√°ria!',
                    'icone': 'Target',
                    'cor': 'warning',
                    'timestamp': datetime.now().isoformat(),
                    'lida': False
                },
                {
                    'id': 'sequencia_acertos',
                    'tipo': 'conquista',
                    'titulo': 'Sequ√™ncia Incr√≠vel!',
                    'mensagem': 'Voc√™ acertou 15 quest√µes seguidas! Continue assim!',
                    'icone': 'Zap',
                    'cor': 'success',
                    'timestamp': (datetime.now() - timedelta(minutes=30)).isoformat(),
                    'lida': False
                },
                {
                    'id': 'proximo_nivel',
                    'tipo': 'progresso',
                    'titulo': 'Quase no Pr√≥ximo N√≠vel!',
                    'mensagem': 'Faltam apenas 23 XP para o n√≠vel 24!',
                    'icone': 'TrendingUp',
                    'cor': 'info',
                    'timestamp': (datetime.now() - timedelta(hours=1)).isoformat(),
                    'lida': False
                },
                {
                    'id': 'simulado_disponivel',
                    'tipo': 'info',
                    'titulo': 'Novo Simulado',
                    'mensagem': 'Simulado de Direito Constitucional dispon√≠vel!',
                    'icone': 'FileText',
                    'cor': 'info',
                    'timestamp': (datetime.now() - timedelta(hours=3)).isoformat(),
                    'lida': True
                },
                {
                    'id': 'ranking_subiu',
                    'tipo': 'conquista',
                    'titulo': 'Subiu no Ranking!',
                    'mensagem': 'Voc√™ subiu 15 posi√ß√µes no ranking geral!',
                    'icone': 'Award',
                    'cor': 'success',
                    'timestamp': (datetime.now() - timedelta(days=1)).isoformat(),
                    'lida': True
                }
            ]
        })
        
    except Exception as e:
        return jsonify({
            'error': f'Erro ao buscar notifica√ß√µes: {str(e)}'
        }), 500

def _calcular_estatisticas(questoes):
    """Calcula estat√≠sticas reais baseadas nas quest√µes"""
    total_questoes = len(questoes)
    total_acertos = sum(1 for q in questoes if q.get('acertou'))
    taxa_acertos = round((total_acertos / total_questoes) * 100) if total_questoes > 0 else 0
    
    tempos = [q.get('tempo_resposta', 0) for q in questoes if q.get('tempo_resposta')]
    tempo_medio = round(sum(tempos) / len(tempos) / 60, 1) if tempos else 0
    
    # Acertos por tema
    acertos_por_tema = {}
    for questao in questoes:
        tema = questao.get('tema')
        if tema and questao.get('acertou'):
            acertos_por_tema[tema] = acertos_por_tema.get(tema, 0) + 1
    
    return {
        'total_questoes': total_questoes,
        'total_acertos': total_acertos,
        'taxa_acertos': taxa_acertos,
        'tempo_medio': tempo_medio,
        'acertos_por_tema': acertos_por_tema,
        'evolucao_semanal': []  # Implementar se necess√°rio
    }

